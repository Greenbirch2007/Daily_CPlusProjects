
要控制和降低延迟，首先要准确测量延迟。因此需要比较准的钟，每个机房配
几个带GPS和原子钟的primary standard的NTP服务器是少不了的

计算延迟的时候，两台机器的时间戳不能直接相减，因为不在同一时钟域。解决办法是设法补偿这个时差。
另外，不仅要测量平均延迟，更重要的是要测量并控制长尾延迟，即99百分位数或99.9百分位数的延迟，
就算sell side,系统偶尔慢一下被speculator利用了也是要亏钱的

普通的c++服务程序，内部延迟(从进程收到消息到进程发出消息)做到几百微妙(即亚毫秒级)是不需要特殊的

网络延迟分传输延迟和惯性延迟，通常局域网内以后为主，广域网以前者为主。前者是传送１字节消息的基本延迟，
大致跟距离成正比，千兆局域网单程是近百微秒，伦敦到纽约是几十毫秒

这个延迟受物理定律限制，优化办法是买更好的网络设备和租更短的线路(
想办法把光速调大)。惯性延迟跟消息大小成正比，跟网络带宽成反比，
千兆TCP有效带宽按115MB/s估算，那么发送1150字节的消息从第１个字节离开本机
网卡到第1150个字节离开本机网卡至少需要10us，这是无法降低的，
因此必要的话可以减小消息长度。
例如，要发送10k的消息，先话２０us　ＣＰＵ时间，压缩到3k,接收短再花
10us解压缩，一共"60us+传输延迟"，这比直接发送10k消息花"100us+传输延迟"
要快一点点
(广域网是否也适用这个办法取决于带宽和延迟的大小)

延迟和吞吐量是矛盾的，通常吞吐量上去了延迟也会跟着上去。因此控制负载
是控制延迟的重要手段。延迟跟吞吐量的关系通常是U型曲线，吞吐量接近０的时候
延迟反而比较高，因此系统比较"冷"，吞吐量上去一些，平均延迟会降到正常水平
这时系统是"温"的；吞吐量再上去一些，延迟缓慢上升，系统是"热"的；
吞吐量过了某个临界点，延迟开始飙升，系统是"烫"的，还可能“冒烟”。
因此要做的是把吞吐量控制在"温"和"热"的范围，
不要"烫"，也不要太冷。系统启动之后要"预热"


延迟和资源使用率是矛盾的，做高吞吐的服务程序，恨不得把CPU和IO都跑满，
资源都用完。而低延迟的服务程序的资源占用率通常低的可怜，让人认为
闲的没有事情，可以再加码，要抵住这种压力。
就算系统到了前面说的"发烫"的程度，其资源使用率也远没有到100%.
实际上平时资源使用率低是为了准备应付突发请求，请求或消息以来就可以
立刻得到处理，尽量减少排队，排队就意味着等待，等待就意味着长延迟。
消除等待是最直接有效的降低延迟的办法，靠的就是富裕的容量。
有时候队列的长度也可以作为系统的性能指标，而不仅仅是CPU使用率和网络
带宽使用率。另外，队列也可能是隐式的，比如操作系统和网络设备的网络输入
输出buffer也算是队列


延迟和可靠传输也是矛盾的，TCP做到可传输的办法是超时重传，一旦发生
重传，几百毫秒的延迟就搭进去了，因此保持网络随时畅通，
避免拥塞也是控制延迟的必要手段。
要注意不要让batch job抢serving job的带宽，比方说把服务器上的
日志文件拷贝到备份存储，这件事不要在频繁交易时间段做。
QoＳ也是办法；或布两套网，每台机器两个网口，两个IP


最后，设法保障关键服务进程的资源充裕，避免侵占(主要是CPU和网络带宽)
比如把服务器额日志文件拷到别的机器会占用网络带宽，一个办法是慢速拷贝
写个程序，故意降低拷贝速度，每５０毫秒拷贝50kb,这样用时间换带宽，
还可以先压缩再拷贝，比如gzip压缩100MB的服务器日志需要１秒，
在生产服务器上会短期占满１个core的CPU资源，可能造成延迟波动。
可以考虑写个慢速压缩的程序，每100毫秒压缩100kb，花一分钟
压缩完100MB数据，分散了CPU资源使用，减少对延迟的影响。
千万不要为了加快压缩速度，采用多线程并发的办法，这就喧宾夺主　


首先明确系统的需求，所谓交易系统，从一个应用程序的角度来说，
1.一定是一个网络相关的应用，假设机器没联网，交易不可能，所以系统
需要通过该TCP/IP连接来收发数据。
数据分两种，一种从交易所发过来的市场数据，流量很大，另一种是系统
向交易所发出的交易指令，相比前者流量很小，
这两种数据需要在不同的TCP/IP连接里传输
２．因为自动化交易系统，人工干预的部分肯定比较小，所以图形界面不是
重点。而为了性能考虑，图形界面需要和后台分开部署在不同的机器上，
通过网络交互，以免任何图形界面上的问题导致后台系统故障或被抢占
资源，这样又要在后台增加新的TCP/IP连接


３．高频交易系统对延迟异常敏感，目前(2014)市面上的主流系统(可以直接
买到的大众系统)延迟至少在100微妙级别，顶级的系统(HFT专有)可以做到１０
微妙以下。

４．系统只需要专注于处理自己收到的数据，不需要和其他机器合作，不需要
担心流量过载

用c++做开发，要注意

首先前两点需求就决定了，这种系统一定是一个多线程程序。虽然对于图形界面
来说，后台系统相当于一个服务端，但这部分的性能不是重点，
用常用的模式就能解决(常用的c++ client/server库，或内嵌
web server之类的，)
而重要的面向交易所的那端，系统其实是一个客户端程序，
只需要维护好固定数量的连接就可以了、为延迟考虑，一定要选择异步I/O
(阻塞的同步I/O会消耗时间上下文切换)
注意

１．是否可以在单线程内完成所有处理？考虑市场数据的流量远远高于发出的
交易指令，在单线程内处理显然是不行的，否则可能收了一大堆数据还没
开始处理，错过了发指令的最佳时机

２．有答案提到要压低平时的资源使用率，这是完全错误的设计思路。
问题同样出在上下文切换上，一旦系统进入IDLE状态，再重新切换回
处理模式是要付出时间代价的。
正确的做法是在线程同步代码中保持对共享变量、内存区的疯狂轮询，
一旦有消息就立刻处理，之后继续轮询，这样是最快的处理方式。
(现在的CPU一般会带有环保功能，使用率低了会导致CPU进入低功耗模式，
同样对性能有严重影响，真正的低延迟系统一定是永远发烫的！)


核心模块是一个多线程的，处理多个TCP/IP连接的模块，接下来就可以对
C++进行讨论，因为需要对接收到的每个TCP或UDP包进行处理，首先要考虑的
是如何把包从接收线程传递给处理线程。
我们知道c++是面向对象的语言，一般情况下最直观的思路是创建一个对象，然后发给
处理线程，但在追求低延迟的系统里不能这样做，因为对象是分配在堆上的，
而堆的内存结构对我们来说是完全不透明的，没办法控制一个对象会具体
分到内存的什么位置上，这直接导致的问题是本来连续收到的网络包，
在内存里的分布式分散的，当处理线程需要读取数据时就会发生大量的
cache miss,产生不可控的延迟。所以对c++开发而言，
不要随便使用堆(用关键字new)。核心的数据要保证分配字连续内存里

市场数据和交易指令都是结构化的，包含了股票名称，价格，时间等一系列信息
如果使用c++　class来对数据进行建模和封装，同样会产生不可知的内存结构
。为了严格控制内存结构，应该使用struct来封装。一方面在对接收到
数据解析时可以直接定义名称，一方面在分配新对象(比如交易指令)时
可以保证所有数据都在分配在连续的内存区域


以上是延迟方面要注意的(给系统取一个名字：TwoHardThings)
除此之外，需要考虑的是业务逻辑的编写。
高频交易系统里注定了业务逻辑不会太复杂，重要的是要保证
正确性和避免指针错误。

正确性应该可以借助于c++的特性比如强类型，模板等来加强验证，
高频系统往往运行时要处理大量订单，所以一定要保证系统运行时
不能崩溃，一旦coredump后果很严重
这个问题也许可以多做编译期静态分析来加强，或需要在系统外
增加安全机制

如何存储系统日志？
如何对系统进行实时监控?
如果系统coredump,事后如何分析找出问题所在？
如何设计保证系统可用性，使得出现coredump之类的情况下
及时切换到备用系统？


Centos 7 如何支持U盘格式ntfs格式设备i的读取
c++中时间延迟的几种方法

１．使用_sleep()函数
2.使用Delay(int time)函数
VC中几种延迟实现方案

1.VC中的WM_TIMER消息映射能进行简单的时间控制
2.VC中使用sleep()函数实现延时，它的单位是ms,如延时２秒,sleep(2000)
3.利用COleDateTime类和COleDateTimeSpan类结合WINDOWS的消息处理过程
来实现秒级延时
4.在精度要求较高的情况下，VC中可以用GetTickCount()函数，
5.多媒体定时器函数DWORD timeGetTime(void)
6.利用多媒体定时器timeSetvent()函数，该函数定时精度为ms级
7.对于精度更高的定时操作，则应该使用QueryPerformanceFrequency()和
QueryPerformanceCountre()函数

1.double a = 1/3; a=?　数值ｄｉａｍ
2.virtual function的实践性

virtual function 的缺点，能打出利于compiler做优化

reference,pointer的区别　　哪些情况非用pointer不可
vector的增增长，map的实现，iterator invalidation相关的问题
为什么要用vittualdestructor?为什么没有virtual constructor?
如何定义clone来实现类似virtual constructor的功能？

inline的优劣，inline keyword的含义
memory alignment and padding,看看对方有么有这种底层的概念
实现一个简单的vector的moveassignment operator

对有一定经验

1. std::shared_ptr的实现，关键是reference
count在哪里定义。能一次回答最好。这个问题主要了解share_ptr

unordered_map的原理。Hash table是如何实现的。如何从空的table
开始一直增加元素，会出现什么情况。我希望对方能答出rehash,这个
在低延迟系统很重要，一个rehash就会不小的延迟了

mutex在linux系统下如何实现，一个lock操作的成本是什么
是否block的成本是不一样的。mutex和spin_lock的区别，优缺点

dynamic_cast是怎么实现的？这是个难题。
能有思路就说明读过ABI了。
用template写factorial
c++03有什么你不喜欢的语法或功能？聊天可以看出对方的功底怎么样
final,override的作用，以及使用场合。概念很简单，我更关心的是
对方是否真正知道为什么要用它们，在什么情况下用？不用会有什么后果
Throw exeption,return errorcode各自的优缺点
lambda function, capture by reference by value的区别
new expression,operator new 和malloc的联系