
目前大多数网络服务器，包括web服务器，Email服务器以及数据库服务器都就具有一个共同点，
就是单位时间内必须处理数目巨大的连接请求


线程池的出现正是着眼于减少线程池本身带来的开销。线程池采用预创建的技术，在用用程序启动之后，将立即
创建一定数量的线程(N1),放入空闲队列中。这些线程都是处于阻塞(Suspended)状态，不消耗CPU,但占用


构建线程池框架

一般线程池都必须剧本下面几个组成部分
1.线程池管理器：用于创建并管理线程池
2.工作线程：线程池中实际执行的线程
3.任务接口：尽管线程池大多数情况下是用来支持网络服务器，
但是我们将线程执行的任务抽象出来，形成任务接口，从而是
线程池与具体的任务无关
任务队列：线程池的概念具体到实现则可能是嘟列，
链表之类的数据结构，其中保存执行线程


我们实现的通用线程池框架由五个重要部分组成

CThreadManage,
CTHreadPool
CThread,
CJob
CWorkerThread

除此之外框架中还包括线程同步使用的类，
CThreadMutex,CCondition


CJob是所有的任务的基类，其提供一个接口Run,所有的任务都必须从该类继承，
同时实现Run方法。该方法中实现具体的任务逻辑

CThread是Linux中的线程的包装，其封装了Linux线程最经常使用的属性和方法，
它也是一个抽象类，是所有线程类的基类，具有一个接口Run

CWorkerThread是实际被调度和执行的线程类，其从CThread继承而来，
实现了CThread中的Run方法

CThreadPool是线程池，其负责保存线程，释放线程以及调用线程

CThreadManage是线程池与用户的直接接口，其屏蔽了内部的具体实现

CThreadMutex用于线程之间的互斥

CCondition则是条件变量的封装，用于线程之间的同步

CThreadManage直接跟客户端打交道，其接受需要创建的线程初始个数，
其接收客户端提交的任务。这儿的任务是具体的非抽象的任务。

CThreadManage的内部实际上调用的都是CThreadPool
相关操作。CThreadPool创建具体的线程，并把客户端提交
的任务分发给CWorkerThread,
CWorkThread实际执行具体的额任务


class CThreadManage
{
    private:
        CThreadPool* m_Pool;
        int m_NumOfThread;
    protected:

public:
    CThreadManage();
    CThreadManage(int num);
    virtual~CThreadManage();

    void SetParallelNum(int num);
    void Run(CJob*job,void*jobdata);
    void TerminateAll(void);
};

其中m_Pool指向实际的线程池；m_NumOfThread是初始创建的时候
允许创建的并发的线程个数。
另外，Run和TerminateAll方法也非常简单，只是简单的调用CThreadPool
的一些相关方法而已


CThreadManage::CThreadManage()
{
    m_NumOfThread= 10;
    m_Pool= new CThreadPool(m_NumOfThread);
}

CThreadManage::CThreadManage(int num)
{
    m_NumOfThread = num;
    m_Pool = new CThreadPool(m_NumOfThread);
}

CThreadManage::~CThreadManage()
{
    if(NULL != m_Pool)
    delete m_Pool;
}

void CThreadManage::SetParallelNum(int num)
{
    m_NumOfThread = num;
}

void CThreadManage::Run(CJob*,void*jobdata)
{
    m_Pool->Run(job,jobdata);
}

void CThreadManage::TerminateAll(void):
{
    m_Pool->TerminateAll();
}

CThread

CThread类实现了对Linux中线程操作的封装，它是所有线程的基类
，也是一个抽象类，提供了一个抽象接口Run,所有的CThread都必须
实现该Run方法

class CThread
{
    private:
    int  m_ErrCode
    Semaphore  m_ThreadSemaphore
    unsigned long m_ThreadID;   
    bool m_Detach;
    bool m_CreateSuspended;
    char* m_ThreadName;
    ThreadState m_ThreadState;

protected:
    void SetErrcode(int errcode){m_ErrCode = errcode;}
    static void* ThreadFunction(void);

public:
    CThread();
    CThread(bool createsupended,bool detach);
    virtual~CThread();

    virtual void Run(void) =0;
    void SetThreadState(ThreadState state){m_ThreadState=state;}
    bool Terminate(void);
    bool Start(void);
    void Exit(void);
    bool Wakeup(void);
    ThreadState GetThreadState(void){return m_ThreadState;}
    int GetLastError(void){return m_ErrCode;}
    void SetThreadName(char* thrname){strcpy(m_ThreadName,thrnamae)}


线程的状态可以分为四种：空闲，忙碌，挂起，终止(包括正常推出和非正常推出)


由于目前linux线程库不支持挂起操作，因此，我们的此处的挂起操作类似于暂停。
如果线程创建后不想立即执行任务，那么我们可以将其"暂停"，如果需要运行，
则唤醒。有一点要注意，一旦线程开始执行任务，
将不能被挂起，其将一直执行任务至完毕


线程类的相关操作十分简单，
线程的执行入口是从Start()函数开始，其将调用函数ThreadF

线程池使用后记


事实上，线程池并不是万能的。它有其特定的使用场合。线程池
还致力于减少线程本身的开销对应所产生的影响，这是有前提的
前提就是线程本身开销与线程执行任务相比不可忽略。如果线程
本身的开销相对于线程任务执行开销而言是可以忽略不计的，那么此时
比如对于FTP服务器以及Telnet服务器，通常传送文件的时间较长
，开销较大，我、此时，我们可以选择"即时创建，即时销毁"的策略

总之线程池的应用长江

1.单位时间内处理任务频繁而且任务处理时间短
2.对实时性要求较高。如果接受到任务后在创建线程，可能满足不了实时
要求，因此必须采用线程池进行预创建

3.必须经常面对高突发性时间
